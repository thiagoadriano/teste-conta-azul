{"version":3,"sources":["../../maps/src/ts/bootstrap/bootstrap.app.ts","../../maps/src/ts/bootstrap/router.bootstrap.ts","../../maps/src/ts/controller/veiculos.controller.ts","../../maps/src/ts/helps/util.helps.ts","../../maps/src/ts/model/veiculos.model.ts","../../maps/src/ts/service/marcas.modelos.service.ts","../../maps/src/ts/service/veiculos.service.ts"],"names":["APPCA","appRun","$inject","angular","module","run","Router","$routeProvider","when","templateUrl","controller","controllerAs","otherwise","redirectTo","config","VeiculosController","VS","NgTableParams","MS","VeiculosModel","Util","selecionaModelos","vm","listaModelos","Model","marca","getModelos","getVeiculos","getAll","then","veiculos","lista","forEach","item","valorCorrigido","valor","toLocaleString","nomeImagem","getNomeImagemLink","imagem","linhaAtiva","tableView","settings","dataset","this","listaMarcas","titleModal","model","initialParams","count","initialSettings","counts","paginationMaxBlocks","paginationMinBlocks","tableParams","abrirModal","$","modal","editar","id","veiculo","searchItemId","salvar","isValid","validaPlaca","data","placa","toLowerCase","patterns","texto","numero","test","toUpperCase","getMarcas","result","factory","idItem","sort","a","b","listaTamanho","length","meioLista","Math","round","i","link","linkSplit","split","nome","replace","substring","combustivel","modelo","MarcasService","$http","$q","def","defer","get","res","fromJson","Marcas","Modelos","resolve","promise","service","VeiculosService","Veiculos","getOne","index","save","obj","push","del","splice"],"mappings":"AAAA,IAAUA,OAAV,SAAUA,GAEN,SAAAC,KADAA,EAAOC,WAKPC,QACKC,OAAO,gBAAiB,UAAW,YACnCC,IAAIJ,GARb,CAAUD,QAAAA,WCAV,IAAUA,OAAV,SAAUA,GAGN,SAAAM,EAAgBC,GACZA,EACKC,KAAK,aACFC,YAAa,sBACbC,WAAY,qBACZC,aAAc,OAEjBC,WACGC,WAAY,cATxBP,EAAOJ,SAAW,kBAalBC,QACKC,OAAO,gBACPU,OAAOR,GAjBhB,CAAUN,QAAAA,WCAV,IAAUA,OAAV,SAAUA,GAEN,SAAAe,EAA4BC,EAAIC,EAAeC,EAAIC,EAAeC,GAsC9D,SAAAC,IACIC,EAAGC,gBACCD,EAAGE,MAAMC,QACTH,EAAGC,aAAeL,EAAGQ,WAAWJ,EAAGE,MAAMC,QA+BjD,SAAAE,IACIX,EAAGY,SAASC,KAAK,SAACC,GACdR,EAAGS,MAAQD,EACXR,EAAGS,MAAMC,QAAQ,SAAAC,GACbA,EAAKC,eAAiB,QAAUD,EAAKE,OAAOC,iBAAmB,MAC/DH,EAAKI,WAAajB,EAAKkB,kBAAkBL,EAAKM,QAC9CN,EAAKO,YAAa,IAEtBlB,EAAGmB,UAAUC,UACTC,QAASrB,EAAGS,UAhFxB,IAAIT,EAAKsB,KACTtB,EAAGS,SACHT,EAAGuB,eACHvB,EAAGC,gBACHD,EAAGwB,WAAa,UAChBxB,EAAGE,MAAQL,EAAc4B,QACzBzB,EAAGmB,UASH,WACI,IAAI3B,GACAkC,eACIC,MAAO,GAEXC,iBACIC,UACAC,oBAAqB,GACrBC,oBAAqB,EACrBV,QAASrB,EAAGS,QAGpB,OAAO,IAAId,EAAcH,EAAOkC,cAAelC,EAAOoC,iBArB3CI,GACfhC,EAAGD,iBAAmBA,EACtBC,EAAGiC,WAsBH,WACIjC,EAAGwB,WAAa,UAChBxB,EAAGC,gBACHD,EAAGE,MAAQL,EAAc4B,QACzBS,EAAE,kBAAkBC,MAAM,SAzB9BnC,EAAGoC,OAmCH,SAAgBC,GACZ,IAAIC,EAAUxC,EAAKyC,aAAavC,EAAGS,MAAO4B,GAC1CrC,EAAGE,MAAQoC,EACXtC,EAAGwB,WAAa,SAChBzB,IACAmC,EAAE,kBAAkBC,MAAM,SAvC9BnC,EAAGwC,OA0CH,SAAgBC,KAzChBzC,EAAG0C,YA4CH,WACI,IAAIC,EAAO3C,EAAGE,MAAM0C,MAAMC,cACtBC,GACIC,MAAO,aACPC,OAAQ,aACRJ,MAAO,qBAEf,OAAIE,EAASF,MAAMK,KAAKN,GACb3C,EAAGE,MAAM0C,MAAQD,EAAKO,cACtBJ,EAASC,MAAME,KAAKN,GACpB3C,EAAGE,MAAM0C,MAAQD,EAAKO,mBAE7BlD,EAAGE,MAAM0C,MAAQ,KAoBrBvC,IAEAT,EAAGuD,YAAY5C,KAAK,SAAC6C,GACjBpD,EAAGuB,YAAc6B,IA5F7B3D,EAAmBb,SAAW,kBAAmB,gBAAiB,gBAAiB,gBAAiB,eAkGpGC,QACKC,OAAO,gBACPM,WAAW,qBAAsBK,GArG1C,CAAUf,QAAAA,WCAV,IAAUA,OAAV,SAAUA,GAsCNG,QACKC,OAAO,gBACPuE,QAAQ,cAvCb,WAEI,OACId,aAIJ,SAAsB9B,EAAmB6C,GACrC7C,EAAM8C,KAAK,SAACC,EAAGC,GACX,OAAOD,EAAEnB,GAAKoB,EAAEpB,KAOpB,IAAK,IAJDqB,EAAejD,EAAMkD,OACrBC,EAAYC,KAAKC,MAAMJ,EAAe,GAGjCK,EAFOT,GAAUM,EAAY,EAAIA,EAElBG,EAAIT,EAAQS,IAChC,GAAItD,EAAMsD,GAAG1B,KAAOiB,EAChB,OAAO7C,EAAMsD,GAGrB,OAAO,MAjBP/C,kBAoBJ,SAA2BgD,GACvB,GAAKA,EAAL,CAEA,IAAIC,EAAYD,EAAKE,MAAM,KACvBC,EAAOF,EAAUA,EAAUN,OAAS,GAKxC,OAHAQ,EAAOA,EAAKC,QAAQ,gBAAiB,KACrCD,EAAOA,EAAKC,QAAQ,UAAW,MAEnBC,UAAU,EAAG,SAlCrC,CAAU3F,QAAAA,WCAV,IAAUA,OAAV,SAAUA,GAoBNG,QACKC,OAAO,gBACPuE,QAAQ,gBArBb,WACI,IAAInD,GACAoE,YAAa,GACbrD,OAAQ,GACRd,MAAO,GACPoE,OAAQ,GACR3B,MAAO,GACP/B,MAAO,GAOX,OACIY,MALJ,WACI,OAAOvB,MAZnB,CAAUxB,QAAAA,WCAV,IAAUA,OAAV,SAAUA,GAEN,SAAA8F,EAAuBC,EAAOC,GAC1B,IAAInD,KACAtB,KACA0E,EAAMD,EAAGE,QAUb,OARAH,EAAMI,IAAI,6BAA6BtE,KAAK,SAAC6C,GACzC,IAAI0B,EAAMjG,QAAQkG,SAAS3B,EAAOT,MAClCpB,EAAcuD,EAAIE,OAClB/E,EAAe6E,EAAIG,QACnBN,EAAIO,QAAQ3D,MAKZ4B,UAIJ,WACI,OAAOwB,EAAIQ,SAJX/E,WAOJ,SAAqBmE,GACjB,OAAOtE,EAAasE,KAxB5BC,EAAc5F,SAAW,QAAS,MA6BlCC,QACKC,OAAO,gBACPsG,QAAQ,gBAAiBZ,GAhClC,CAAU9F,QAAAA,WCAV,IAAUA,OAAV,SAAUA,GAEN,SAAA2G,EAAyBZ,EAAOC,GAC5B,IAAIjE,KACJ,OACIH,OAMJ,WACI,IAAIqE,EAAMD,EAAGE,QASb,OARKnE,EAAMkD,OAMPgB,EAAIO,QAAQzE,GALZgE,EAAMI,IAAI,8BAA8BtE,KAAK,SAAC6C,GAC1C3C,EAAQ5B,QAAQkG,SAAS3B,EAAOT,KAAK2C,UACrCX,EAAIO,QAAQzE,KAKbkE,EAAIQ,SAfXI,OAkBJ,SAAiBC,GACb,OAAO/E,EAAM+E,IAlBbC,KAqBJ,SAAeC,GACXjF,EAAMkF,KAAKD,IArBXE,IAwBJ,SAAiBJ,GACb/E,EAAMoF,OAAOL,EAAO,KAhC5BH,EAAgBzG,SAAW,QAAS,MAoCpCC,QACKC,OAAO,gBACPsG,QAAQ,kBAAmBC,GAvCpC,CAAU3G,QAAAA","file":"../app.min.js","sourcesContent":["namespace APPCA {\r\n    appRun.$inject = [];\r\n    function appRun() {\r\n\r\n    }\r\n\r\n    angular\r\n        .module('AppContaAzul', [\"ngRoute\", \"ngTable\"])\r\n        .run(appRun);\r\n}","namespace APPCA {\r\n\r\n    Router.$inject = [\"$routeProvider\"];\r\n    function Router($routeProvider: ng.route.IRouteProvider) {\r\n        $routeProvider\r\n            .when(\"/veiculos\", {\r\n                templateUrl: \"views/veiculos.html\",\r\n                controller: \"VeiculosController\",\r\n                controllerAs: \"vm\"\r\n            })\r\n            .otherwise({\r\n                redirectTo: \"/veiculos\"\r\n            });\r\n    }\r\n\r\n    angular\r\n        .module(\"AppContaAzul\")\r\n        .config(Router);\r\n}","namespace APPCA {\r\n    VeiculosController.$inject = ['VeiculosService', 'NgTableParams', 'MarcasService', 'VeiculosModel', 'UtilHelpers'];\r\n    function VeiculosController(VS, NgTableParams, MS, VeiculosModel, Util) {\r\n        let vm = this;\r\n        vm.lista = <Array<IVeiculos>>[];\r\n        vm.listaMarcas = [];\r\n        vm.listaModelos = [];\r\n        vm.titleModal = \"Incluir\";\r\n        vm.Model = VeiculosModel.model();\r\n        vm.tableView = tableParams();\r\n        vm.selecionaModelos = selecionaModelos;\r\n        vm.abrirModal = abrirModal;\r\n        vm.editar = editar;\r\n        vm.salvar = salvar;\r\n        vm.validaPlaca = validaPlaca;\r\n\r\n        init();\r\n\r\n        function tableParams() {\r\n            let config = {\r\n                initialParams: {\r\n                    count: 2\r\n                },\r\n                initialSettings: {\r\n                    counts: [],\r\n                    paginationMaxBlocks: 13,\r\n                    paginationMinBlocks: 2,\r\n                    dataset: vm.lista\r\n                }\r\n            }\r\n            return new NgTableParams(config.initialParams, config.initialSettings);\r\n        }\r\n\r\n        function abrirModal() {\r\n            vm.titleModal = \"Incluir\";\r\n            vm.listaModelos = [];\r\n            vm.Model = VeiculosModel.model();\r\n            $(\"#veiculosModal\").modal(\"show\");\r\n        }\r\n\r\n        function selecionaModelos() {\r\n            vm.listaModelos = [];\r\n            if (vm.Model.marca) {\r\n                vm.listaModelos = MS.getModelos(vm.Model.marca);\r\n            }\r\n        }\r\n\r\n        function editar(id: number) {\r\n            let veiculo = Util.searchItemId(vm.lista, id);\r\n            vm.Model = veiculo;\r\n            vm.titleModal = \"Editar\";\r\n            selecionaModelos();\r\n            $(\"#veiculosModal\").modal(\"show\");\r\n        }\r\n\r\n        function salvar(isValid) {\r\n        }\r\n\r\n        function validaPlaca() {\r\n            var data = vm.Model.placa.toLowerCase(),\r\n                patterns = {\r\n                    texto: /[a-z]{1,3}/,\r\n                    numero: /[0-9]{1,4}/,\r\n                    placa: /[a-z]{3}-[0-9]{4}/\r\n                };\r\n            if (patterns.placa.test(data)) {\r\n                return vm.Model.placa = data.toUpperCase();\r\n            } else if (patterns.texto.test(data)) {\r\n                return vm.Model.placa = data.toUpperCase();\r\n            } else {\r\n                vm.Model.placa = \"\";\r\n            }\r\n        }\r\n\r\n        function getVeiculos() {\r\n            VS.getAll().then((veiculos) => {\r\n                vm.lista = veiculos;\r\n                vm.lista.forEach(item => {\r\n                    item.valorCorrigido = \"R$ \" + (+item.valor).toLocaleString() + \",00\";\r\n                    item.nomeImagem = Util.getNomeImagemLink(item.imagem);\r\n                    item.linhaAtiva = false;\r\n                });\r\n                vm.tableView.settings({\r\n                    dataset: vm.lista\r\n                });\r\n            });\r\n        }\r\n\r\n        function init() {\r\n\r\n            getVeiculos();\r\n\r\n            MS.getMarcas().then((result) => {\r\n                vm.listaMarcas = result;\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    angular\r\n        .module(\"AppContaAzul\")\r\n        .controller(\"VeiculosController\", VeiculosController);\r\n}","namespace APPCA {\r\n    function UtilHelpers() {\r\n\r\n        return {\r\n            searchItemId: searchItemId,\r\n            getNomeImagemLink: getNomeImagemLink\r\n        };\r\n\r\n        function searchItemId(lista: Array<any>, idItem: number) {\r\n            lista.sort((a, b) => {\r\n                return a.id > b.id;\r\n            });\r\n\r\n            let listaTamanho = lista.length,\r\n                meioLista = Math.round(listaTamanho / 2),\r\n                posiStart = idItem <= meioLista ? 0 : meioLista;\r\n\r\n            for (let i = posiStart; i < idItem; i++) {\r\n                if (lista[i].id === idItem) {\r\n                    return lista[i];\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n\r\n        function getNomeImagemLink(link) {\r\n            if (!link) return;\r\n\r\n            var linkSplit = link.split(\"/\");\r\n            var nome = linkSplit[linkSplit.length - 1];\r\n\r\n            nome = nome.replace(/\\.[a-z]{3,4}$/, '');\r\n            nome = nome.replace(/(_|\\.)/g, ' ');\r\n\r\n            return nome.substring(0, 25);\r\n        }\r\n    }\r\n\r\n    angular\r\n        .module(\"AppContaAzul\")\r\n        .factory(\"UtilHelpers\", UtilHelpers);\r\n}","namespace APPCA {\r\n    function VeiculosModel(): IVeiculos {\r\n        let Model = {\r\n            combustivel: \"\",\r\n            imagem: \"\",\r\n            marca: \"\",\r\n            modelo: \"\",\r\n            placa: \"\",\r\n            valor: 0\r\n        };\r\n\r\n        function getModel() {\r\n            return Model;\r\n        }\r\n\r\n        return {\r\n            model: getModel\r\n        };\r\n    }\r\n\r\n    angular\r\n        .module(\"AppContaAzul\")\r\n        .factory(\"VeiculosModel\", VeiculosModel);\r\n}","namespace APPCA {\r\n    MarcasService.$inject = [\"$http\", \"$q\"];\r\n    function MarcasService($http, $q) {\r\n        let listaMarcas = [],\r\n            listaModelos = {},\r\n            def = $q.defer();\r\n\r\n        $http.get(\"data/marcas-veiculos.json\").then((result) => {\r\n            let res = angular.fromJson(result.data);\r\n            listaMarcas = res.Marcas;\r\n            listaModelos = res.Modelos;\r\n            def.resolve(listaMarcas);\r\n        });\r\n\r\n\r\n        return {\r\n            getMarcas: _getMarcas,\r\n            getModelos: _getModelos\r\n        }\r\n\r\n        function _getMarcas() {\r\n            return def.promise;\r\n        }\r\n\r\n        function _getModelos(modelo: string): Array<string> {\r\n            return listaModelos[modelo];\r\n        }\r\n\r\n    }\r\n\r\n    angular\r\n        .module(\"AppContaAzul\")\r\n        .service(\"MarcasService\", MarcasService);\r\n}","namespace APPCA {\r\n    VeiculosService.$inject = [\"$http\", \"$q\"];\r\n    function VeiculosService($http, $q) {\r\n        let lista = [];\r\n        return {\r\n            getAll: _getAll,\r\n            getOne: _getOne,\r\n            save: _save,\r\n            del: _delete\r\n        }\r\n\r\n        function _getAll() {\r\n            let def = $q.defer();\r\n            if (!lista.length) {\r\n                $http.get(\"data/conta-azul-dados.json\").then((result) => {\r\n                    lista = angular.fromJson(result.data.Veiculos);\r\n                    def.resolve(lista);\r\n                });\r\n            } else {\r\n                def.resolve(lista);\r\n            }\r\n            return def.promise;\r\n        }\r\n\r\n        function _getOne(index) {\r\n            return lista[index];\r\n        }\r\n\r\n        function _save(obj) {\r\n            lista.push(obj);\r\n        }\r\n\r\n        function _delete(index) {\r\n            lista.splice(index, 1);\r\n        }\r\n    }\r\n\r\n    angular\r\n        .module(\"AppContaAzul\")\r\n        .service(\"VeiculosService\", VeiculosService);\r\n}"]}